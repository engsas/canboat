#!/usr/bin/perl
#
#  - Check for /dev/actisense*
#  - While /dev/actisense* exists, keep n2kd running. If it quits, restart it.
#  - Also keep n2k.php -monitor running. If it quits, restart it.
#  - Stop n2kd if /dev/actisense disappears.
#
# This assumes there is a configuration file /etc/default/n2kd
# containing one or more of the following configuration settings:
#
#       CAN_INTERFACE=can0
#       ACTISENSE_PRIMARY=/dev/actisense-1
#       ACTISENSE_SECONDARY=/dev/actisense-2
#       MONITOR=false
#       ANALYZER_OPTIONS=
#       N2KD_OPTIONS=
#
# Leave out ACTISENSE_SECONDARY if you have only one Actisense gateway.
# Leave MONITOR set to false for now; its contents have not been open sourced yet.
#
# (C) 2009-2015, Kees Verruijt, Harlingen, The Netherlands.
#
# This file is part of CANboat.
#
# CANboat is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# CANboat is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with CANboat.  If not, see <http://www.gnu.org/licenses/>.
#

use Config::General;

my $configFile = '/etc/default/n2kd';
my $configObject = Config::General->new(-ConfigFile => $configFile,
                -MergeDuplicateOptions => 1,
#               -DefaultConfig => {
#                       CAN_INTERFACE => "can0",
#                       ACTISENSE_PRIMARY => "/dev/ttyUSB0",
#                       MONITOR => "false",
#                       N2KD_OPTIONS => "",
#                }
        );

die "Could not read config from $configFile!\n" unless ref $configObject;

my %config = $configObject->getall();

my $CAN_INTERFACE = $config{'CAN_INTERFACE'};
my $ACTISENSE_PRIMARY = $config{'ACTISENSE_PRIMARY'};
my $ACTISENSE_SECONDARY = $config{'ACTISENSE_SECONDARY'};
my $MONITOR = $config{'MONITOR'};
my $N2KD_OPTIONS = $config{'N2KD_OPTIONS'};
my $ANALYZER_OPTIONS = $config{'ANALYZER_OPTIONS'};
die "Configuration file $configFile incomplete: No ACTISENSE_PRIMARY" unless ($ACTISENSE_PRIMARY or $CAN_INTERFACE);

my $LOGFILE = '/var/log/n2kd_monitor.log';
my $N2KD_LOGFILE = '/var/log/n2kd.log';
my $MONITOR_LOGFILE = '/var/log/n2k-status.log';

my $CAN = 0;
my $stat;
my $n2kd;
my $monitor;
my $child;
my $stop = 0;
my $last_monitor = 0;

if ($MONITOR ne "true" && $MONITOR ne "yes")
{
  # Disable the monitoring part. This is not open source yet, so disable it by default.
  $last_monitor = LONG_MAX;
}

use POSIX();

sub logText($)
{
  my ($t) = @_;

  print POSIX::strftime('%Y-%m-%d %T: ', localtime) . $t . "\n";
}

sub daemonize()
{
  chdir '/';
  open STDIN, '/dev/null' or die "Can't read /dev/null: $!";
  open STDOUT, '>>', $LOGFILE or die "Can't write $LOGFILE: $!";
  defined(my $pid = fork) or die "Can't fork: $!";
  exit if $pid;
  die "Can't start a new session: $!" if setsid == -1;
  open STDERR, '>&STDOUT' or die "Can't dup stdout: $!";
}

sub sigHandler()
{
  logText("Got signal to quit.\n");
  $stop = 1;
}

# checks if CAN_INTERFACE network interface is configured and up
# if not true, it configures and brings it up
# return undef, if it could not bring the interfac up and 1 on success
sub manageCanInterface($)
{
  # disable experimental warnings (smartmatch), because
  # the messages lead to failing n2kd_monitor service
  no if ($] >= 5.018), 'warnings' => 'experimental';

  my $CAN_INTERFACE = shift;

  my @result = `ip a show $CAN_INTERFACE up`;
  if(scalar(@result) < 1 or !(/$CAN_INTERFACE/ ~~ @result))
  {
    @result = `ip a show $CAN_INTERFACE`;
    if(scalar(@result) < 1 or !(/$CAN_INTERFACE/ ~~ @result))
    {
      if(system("ip link add $CAN_INTERFACE type can bitrate 250000") == 0)
      {
        logText("Added $CAN_INTERFACE network interface\n");
      }
      else
      {
        logText("Failed to add $CAN_INTERFACE\n");
        return undef;
      }
    }
    @result = `ip link set $CAN_INTERFACE up type can bitrate 250000`;
    if(scalar(@result) != 0)
    {
      logText("Failed to bring $CAN_INTERFACE up\n");
      return undef;
    }
  }
  logText("$CAN_INTERFACE up");
  return 1;
}

daemonize();

logText("Delayed start of N2KD monitor.");
sleep 10;
logText("Starting N2KD monitor.");

$SIG{'INT'} = 'sigHandler';
$SIG{'HUP'} = 'sigHandler';

if($CAN_INTERFACE)
{
  logText("Using socket can interface $CAN_INTERFACE, disabling ACTISENSE_PRIMARY");
  $CAN = 1;
  if(!manageCanInterface($CAN_INTERFACE))
  {
    die "Could not add or bring $CAN_INTERFACE up\n";
  }
}

if (!$CAN_INTERFACE and !stat($ACTISENSE_PRIMARY))
{
  logText("Waiting for $ACTISENSE_PRIMARY to appear.");
}

if (!pipe(PIPEREAD, PIPEWRITE))
{
  die "Cannot create pipes\n";
}

for (;;)
{
  while (($child = POSIX::waitpid(-1, POSIX::WNOHANG)) > 0)
  {
    if ($child == $n2kd)
    {
      logText "N2KD monitor port daemon $child finished.";
      $n2kd = undef;
    }
    elsif ($child == $monitor)
    {
      $monitor = undef;
    }
  }

  if ($stop == 0 and ($CAN or stat($ACTISENSE_PRIMARY)))
  {
    if (!$CAN and !$stat)
    {
      logText("Hardware device $ACTISENSE_PRIMARY found.");
      $stat = 1;
    }
    if (!$n2kd)
    {
      if (($n2kd = fork()) == 0)
      {
        open STDIN, '<&PIPEREAD' or die "Can't read PIPEREAD: $!";
        open STDOUT, '>&PIPEWRITE' or die "Can't reassign PIPEWRITE: $!";
        open STDERR, '>>', $N2KD_LOGFILE or die "Can't write to $N2KD_LOGFILE $!";
        $ENV{'PATH'} = '/usr/local/bin:/bin:/usr/bin';
        if($CAN)
        {
            exec '/bin/bash', '-c', "candump $CAN_INTERFACE | candump2analyzer | analyzer $ANALYZER_OPTIONS -json | n2kd $N2KD_OPTIONS";
        }
        elsif ($ACTISENSE_SECONDARY)
        {
          exec '/bin/bash', '-c', "actisense-serial -t 10 $ACTISENSE_PRIMARY | actisense-serial $ACTISENSE_SECONDARY -t 10 | analyzer $ANALYZER_OPTIONS -json | n2kd $N2KD_OPTIONS";
        }
        else
        {
          exec '/bin/bash', '-c', "actisense-serial -t 10 $ACTISENSE_PRIMARY | analyzer $ANALYZER_OPTIONS -json | n2kd $N2KD_OPTIONS";
        }
      }
      elsif ($n2kd)
      {
        logText("Starting N2K daemon $n2kd.");
      }
      else
      {
        logText("Fork failed.");
      }
      sleep(15);
    }
    if (!$monitor && (time > $last_monitor + 30))
    {
      $last_monitor = time;
      if (($monitor = fork()) == 0)
      {
        open STDIN, '/dev/null' or die "Can't read /dev/null: $!";
        open STDOUT, '>>', $MONITOR_LOGFILE or die "Can't write to $MONITOR_LOGFILE $!";
        open STDERR, '>&STDOUT' or die "Can't dup stdout: $!";
        exec 'php5', '/usr/local/bin/n2k.php', '-monitor';
      }
      if (!$monitor)
      {
        logText("Fork monitor failed.");
      }
    }
  }
  else
  {
    if ($stop == 0 and !$CAN and $stat)
    {
      logText("Hardware device $ACTISENSE_PRIMARY disappeared.");
      $stat = undef;
    }
    if ($n2kd)
    {
      logText("Requesting stop for N2K port daemon $n2kd.");
      kill 2, $n2kd;
      if($CAN)
      {
        system 'killall -9 candump';
      }
      else
      {
        system 'killall -9 actisense-serial';
      }
    }
    if ($stop)
    {
      exit(0);
    }
  }
  sleep(5);
}
